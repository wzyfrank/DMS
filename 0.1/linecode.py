import numpy as np


###############################################################################
#FUNCTION: get_linecode

#INPUT: None

#OUTPUT: an 2d array of Z impedance per unit length
#        an 2d array of C admittance per unit length

###############################################################################
def get_linecode():
    # unit: ohms per mile
    Z1 = np.array([
    [0.4576 + 1.0780j, 0.1560 + 0.5017j, 0.1535 + 0.3849j],
    [0.1560 + 0.5017j, 0.4666 + 1.0482j, 0.1580 + 0.4236j],
    [0.1535 + 0.3849j, 0.1580 + 0.4236j, 0.4615 + 1.0651j],
    ])
    # unit siemens per mile
    C1 = 1j * 1e-6 * np.array([
    [5.6765, -1.8319, -0.6982],
    [-1.8319, 5.9809, -1.1645],
    [-0.6982, -1.1645, 5.3971],
    ])
    # unit: ohms per mile
    Z2 = np.array([
    [0.4666 + 1.0482j, 0.1580 + 0.4236j, 0.1560 + 0.5017j],
    [0.1580 + 0.4236j, 0.4615 + 1.0651j, 0.1535 + 0.3849j],
    [0.1560 + 0.5017j, 0.1535 + 0.3849j, 0.4576 + 1.0780j],
    ])
    # unit siemens per mile
    C2 = 1j * 1e-6 * np.array([
    [5.9809, -1.1645, -1.8319],
    [-1.1645, 5.3971, -0.6982],
    [-1.8319, -0.6982, 5.6765],
    ])    
    # unit: ohms per mile
    Z3 = np.array([
    [0.4615 + 1.0651j, 0.1535 + 0.3849j, 0.1580 + 0.4236j],
    [0.1535 + 0.3849j, 0.4576 + 1.0780j, 0.1560 + 0.5017j],
    [0.1580 + 0.4236j, 0.1560 + 0.5017j, 0.4666 + 1.0482j],
    ])
    # unit siemens per mile
    C3 = 1j * 1e-6 * np.array([
    [5.3971, -0.6982, -1.1645],
    [-0.6982, 5.6765, -1.8319],
    [-1.1645, -1.8319, 5.9809],
    ])    
    # unit: ohms per mile
    Z4 = np.array([
    [0.4615 + 1.0651j, 0.1580 + 0.4236j, 0.1535 + 0.3849j],
    [0.1580 + 0.4236j, 0.4666 + 1.0482j, 0.1560 + 0.5017j],
    [0.1535 + 0.3849j, 0.1560 + 0.5017j, 0.4576 + 1.0780j],
    ])
    # unit siemens per mile
    C4 = 1j * 1e-6 * np.array([
    [5.3971, -1.1645, -0.6982],
    [-1.1645, 5.9809, -1.8319],
    [-0.6982, -1.8319, 5.6765],
    ])       
    # unit: ohms per mile
    Z5 = np.array([
    [0.4666 + 1.0482j, 0.1560 + 0.5017j, 0.1580 + 0.4236j],
    [0.1560 + 0.5017j, 0.4576 + 1.0780j, 0.1535 + 0.3849j],
    [0.1580 + 0.4236j, 0.1535 + 0.3849j, 0.4615 + 1.0651j],
    ])
    # unit siemens per mile
    C5 = 1j * 1e-6 * np.array([
    [5.9809, -1.8319, -1.1645],
    [-1.8319, 5.6765, -0.6982],
    [-1.1645, -0.6982, 5.3971],
    ])    
    # unit: ohms per mile
    Z6 = np.array([
    [0.4576 + 1.0780j, 0.1535 + 0.3849j, 0.1560 + 0.5017j],
    [0.1535 + 0.3849j, 0.4615 + 1.0651j, 0.1580 + 0.4236j],
    [0.1560 + 0.5017j, 0.1580 + 0.4236j, 0.4666 + 1.0482j],
    ])
    # unit siemens per mile
    C6 = 1j * 1e-6 * np.array([
    [5.6765, -0.6982, -1.8319],
    [-0.6982, 5.3971, -1.1645],
    [-1.8319, -1.1645, 5.9809],
    ]) 
    # unit: ohms per mile
    Z7 = np.array([
    [0.4576 + 1.0780j, 0.0000 + 0.0000j, 0.1535 + 0.3849j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.1535 + 0.3849j, 0.0000 + 0.0000j, 0.4615 + 1.0651j],
    ])    
    # unit siemens per mile
    C7 = 1j * 1e-6 * np.array([
    [5.1154, 0.0000, -1.0549],
    [0.0000, 0.0000, 0.0000],
    [-1.0549, 0.0000, 5.1704],
    ])
    # unit: ohms per mile
    Z8 = np.array([
    [0.4576 + 1.0780j, 0.1535 + 0.3849j, 0.0000 + 0.0000j],
    [0.1535 + 0.3849j, 0.4615 + 1.0651j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    ])    
    # unit siemens per mile
    C8 = 1j * 1e-6 * np.array([
    [5.1154, -1.0549, 0.0000],
    [-1.0549, 5.1704, 0.0000],
    [0.0000, 0.0000, 0.0000],
    ])
    # unit: ohms per mile
    Z9 = np.array([
    [1.3292 + 1.3475j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    ])    
    # unit siemens per mile
    C9 = 1j * 1e-6 * np.array([
    [4.5193, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000],
    ])
    # unit: ohms per mile
    Z10 = np.array([
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 1.3292 + 1.3475j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    ])    
    # unit siemens per mile
    C10 = 1j * 1e-6 * np.array([
    [0.0000, 0.0000, 0.0000],
    [0.0000, 4.5193, 0.0000],
    [0.0000, 0.0000, 0.0000],
    ])
    # unit: ohms per mile
    Z11 = np.array([
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 0.0000 + 0.0000j],
    [0.0000 + 0.0000j, 0.0000 + 0.0000j, 1.3292 + 1.3475j],
    ])    
    # unit siemens per mile
    C11 = 1j * 1e-6 * np.array([
    [0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 4.5193],
    ])
    # unit: ohms per mile
    Z12 = np.array([
    [1.5209 + 0.7521j, 0.5198 + 0.2775j, 0.4924 + 0.2157j],
    [0.5198 + 0.2775j, 1.5329 + 0.7162j, 0.5198 + 0.2775j],
    [0.4924 + 0.2157j, 0.5198 + 0.2775j, 1.5209 + 0.7521j],
    ])    
    # unit siemens per mile
    C12 = 1j * 1e-6 * np.array([
    [67.2242, 0.0000, 0.0000],
    [0.0000, 67.2242, 0.0000],
    [0.0000, 0.0000, 67.2242],
    ])    
    
    Z = np.concatenate((Z1, Z2, Z3, Z4, Z5, Z6, Z7, Z8, Z9, Z10, Z11, Z12), axis = 0)
    C = np.concatenate((C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12), axis = 0)

    return (Z, C)
 